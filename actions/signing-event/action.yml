name: 'Signing event'
description: 'TUF-on-CI Signing event management'

# This action is called from signing-event workflow, which is dispatched in multiple ways
# depending on the type of token provided in inputs.
#
# 1. create-signing-events action creates a new signing event branch
#     * When using a custom token this triggers push event handler
#     * When using the default GitHub token the action calls createWorkflowDispatch()
# 2. A signer pushes artifact changes to a signing event branch
#     * This triggers push event handler
# 3. This action (signing-event) makes a metadata change in update_targets step as a result of an artifact change
#     * When using a custom token this triggers push event handler
#     * When using the default GitHub token the action calls createWorkflowDispatch()
#
# Cases 1 & 3 lead to status step running. Case 2 leads to skipping status step, but
# triggering case 3 immediately afterwards.

inputs:
  token:
    description: 'GitHub token'
    required: true

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      with:
        token: ${{ inputs.token }}
        fetch-depth: 0

    - uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c
      with:
        python-version: "3.11"

    - run: pip --quiet install $GITHUB_ACTION_PATH/../../repo/
      shell: bash

    - id: update_targets
      run: |
        tuf-on-ci-update-targets >> output.md
        exit_code=$?

        cat output.md
        cat output.md >> "$GITHUB_STEP_SUMMARY"

        echo "exit_code=$exit_code" >> GITHUB_OUTPUT
      shell: bash

    - id: status
      # print event status update only when artifact updates were not made
      if: steps.update_targets.outputs.exit_code == '202'
      run: |
        tuf-on-ci-status >> output.md
        exit_code=$?

        cat output.md
        cat output.md >> "$GITHUB_STEP_SUMMARY"

        echo "exit_code=$exit_code" >> GITHUB_OUTPUT
      shell: bash

    - id: file-issue
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
      env:
        UPDATE_TARGETS_EXIT_CODE: ${{ steps.update_targets.outputs.exit_code }}
        STATUS_EXIT_CODE: ${{ steps.status.outputs.exit_code }}
      with:
        github-token: ${{ inputs.token }}
        script: |
          const fs = require('fs')
          issue = 0
          const repo = context.repo.owner + "/" + context.repo.repo
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: [process.env.GITHUB_REF_NAME],
          })
          if (issues.data.length > 1) {
            core.setFailed("Found more than one issue with same label")
          } else if (issues.data.length == 0) {
            const response = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "Signing event: " + process.env.GITHUB_REF_NAME,
              body: "Processing signing event " + process.env.GITHUB_REF_NAME + ", please wait.",
              labels: [process.env.GITHUB_REF_NAME],
            })
            issue = response.data.number
            console.log("Created issue #" + issue)
          } else {
            issue = issues.data[0].number
            console.log("Found existing issue #" + issue)
          }

          const success_exit_codes = [0, 201, 202]
          if (!success_exit_codes.includes(process.env.UPDATE_TARGETS_EXIT_CODE) ||
              !success_exit_codes.includes(process.env.STATUS_EXIT_CODE)) {
            summary = "Unexpected failure"
            url = new URL("https://github.com/theupdateframework/tuf-on-ci/issues/new")
            url.searchParams.set("title", "Unexpected failure in signing event")
            url.searchParams.set("body", `Please see https://github.com/${repo}/issues/${issue}`)
            message = "### Unexpected failure\n\n"
            message += `Signing event has encountered an error, please check logs and [file an issue](${url}).`
          } else if (process.env.STATUS_EXIT_CODE == 0) {
            summary = "Signing event is successful"
            pr_url = new URL("https://github.com/" + repo + "/compare/main..." + process.env.GITHUB_REF_NAME)
            pr_url.searchParams.set("expand", "1")
            pr_url.searchParams.set("title", "Signing event " + process.env.GITHUB_REF_NAME)
            pr_url.searchParams.set("body", "Signing event " + process.env.GITHUB_REF_NAME + " is successful and ready to merge.\n\nCloses #" + issue + ".")
            message = fs.readFileSync('./output.md').toString()
            message += "### Signing event is successful\n\n"
            message += "Threshold of signatures has been reached. A [pull request](" + pr_url + ") can be opened."
          } else {
            summary = "Signing event in progress"
            message = fs.readFileSync('./output.md').toString()
          }
          console.log(summary)

          await github.rest.issues.createComment({
            issue_number: issue,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: message,
          })

          await core.summary.addHeading(summary).write()

    - name: Dispatch another signing event workflow
      # dispatch if using default token: otherwise update_targets step has already triggered a push event
      if: inputs.token == github.token && steps.update_targets.outputs.targets_updated == 'true'
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
      with:
        github-token: ${{ inputs.token }}
        script: |
          console.log('Dispatching another signing event workflow after a targets metadata update')
          github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'signing-event.yml',
            ref: process.env.GITHUB_REF_NAME,
          })
